// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: solar.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SolarChargingState int32

const (
	SolarChargingState_STATE_DEACTIVATED      SolarChargingState = 0
	SolarChargingState_STATE_ACTIVATED        SolarChargingState = 1
	SolarChargingState_STATE_MPPT             SolarChargingState = 2
	SolarChargingState_STATE_EQUALIZING       SolarChargingState = 3
	SolarChargingState_STATE_BOOST            SolarChargingState = 4
	SolarChargingState_STATE_FLOATING         SolarChargingState = 5
	SolarChargingState_STATE_CURRENT_LIMITING SolarChargingState = 6
)

// Enum value maps for SolarChargingState.
var (
	SolarChargingState_name = map[int32]string{
		0: "STATE_DEACTIVATED",
		1: "STATE_ACTIVATED",
		2: "STATE_MPPT",
		3: "STATE_EQUALIZING",
		4: "STATE_BOOST",
		5: "STATE_FLOATING",
		6: "STATE_CURRENT_LIMITING",
	}
	SolarChargingState_value = map[string]int32{
		"STATE_DEACTIVATED":      0,
		"STATE_ACTIVATED":        1,
		"STATE_MPPT":             2,
		"STATE_EQUALIZING":       3,
		"STATE_BOOST":            4,
		"STATE_FLOATING":         5,
		"STATE_CURRENT_LIMITING": 6,
	}
)

func (x SolarChargingState) Enum() *SolarChargingState {
	p := new(SolarChargingState)
	*p = x
	return p
}

func (x SolarChargingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SolarChargingState) Descriptor() protoreflect.EnumDescriptor {
	return file_solar_proto_enumTypes[0].Descriptor()
}

func (SolarChargingState) Type() protoreflect.EnumType {
	return &file_solar_proto_enumTypes[0]
}

func (x SolarChargingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SolarChargingState.Descriptor instead.
func (SolarChargingState) EnumDescriptor() ([]byte, []int) {
	return file_solar_proto_rawDescGZIP(), []int{0}
}

type ProductType int32

const (
	ProductType_TYPE_CONTROLLER ProductType = 0
	ProductType_TYPE_INVERTER   ProductType = 1
)

// Enum value maps for ProductType.
var (
	ProductType_name = map[int32]string{
		0: "TYPE_CONTROLLER",
		1: "TYPE_INVERTER",
	}
	ProductType_value = map[string]int32{
		"TYPE_CONTROLLER": 0,
		"TYPE_INVERTER":   1,
	}
)

func (x ProductType) Enum() *ProductType {
	p := new(ProductType)
	*p = x
	return p
}

func (x ProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_solar_proto_enumTypes[1].Descriptor()
}

func (ProductType) Type() protoreflect.EnumType {
	return &file_solar_proto_enumTypes[1]
}

func (x ProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType.Descriptor instead.
func (ProductType) EnumDescriptor() ([]byte, []int) {
	return file_solar_proto_rawDescGZIP(), []int{1}
}

type BatteryType int32

const (
	BatteryType_BATTERY_TYPE_OPEN       BatteryType = 0
	BatteryType_BATTERY_TYPE_SEALED     BatteryType = 1
	BatteryType_BATTERY_TYPE_GEL        BatteryType = 2
	BatteryType_BATTERY_TYPE_LITHIUM    BatteryType = 3
	BatteryType_BATTERY_TYPE_CUSTOMIZED BatteryType = 4
)

// Enum value maps for BatteryType.
var (
	BatteryType_name = map[int32]string{
		0: "BATTERY_TYPE_OPEN",
		1: "BATTERY_TYPE_SEALED",
		2: "BATTERY_TYPE_GEL",
		3: "BATTERY_TYPE_LITHIUM",
		4: "BATTERY_TYPE_CUSTOMIZED",
	}
	BatteryType_value = map[string]int32{
		"BATTERY_TYPE_OPEN":       0,
		"BATTERY_TYPE_SEALED":     1,
		"BATTERY_TYPE_GEL":        2,
		"BATTERY_TYPE_LITHIUM":    3,
		"BATTERY_TYPE_CUSTOMIZED": 4,
	}
)

func (x BatteryType) Enum() *BatteryType {
	p := new(BatteryType)
	*p = x
	return p
}

func (x BatteryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatteryType) Descriptor() protoreflect.EnumDescriptor {
	return file_solar_proto_enumTypes[2].Descriptor()
}

func (BatteryType) Type() protoreflect.EnumType {
	return &file_solar_proto_enumTypes[2]
}

func (x BatteryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatteryType.Descriptor instead.
func (BatteryType) EnumDescriptor() ([]byte, []int) {
	return file_solar_proto_rawDescGZIP(), []int{2}
}

type SolarConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxSystemVoltage        uint32      `protobuf:"varint,1,opt,name=max_system_voltage,json=maxSystemVoltage,proto3" json:"max_system_voltage,omitempty"`
	RatedChargingCurrent    uint32      `protobuf:"varint,2,opt,name=rated_charging_current,json=ratedChargingCurrent,proto3" json:"rated_charging_current,omitempty"`
	RatedDischargingCurrent uint32      `protobuf:"varint,3,opt,name=rated_discharging_current,json=ratedDischargingCurrent,proto3" json:"rated_discharging_current,omitempty"`
	ProductType             ProductType `protobuf:"varint,4,opt,name=product_type,json=productType,proto3,enum=ProductType" json:"product_type,omitempty"`
	ProductModel            string      `protobuf:"bytes,5,opt,name=product_model,json=productModel,proto3" json:"product_model,omitempty"`
	SoftwareVersion         string      `protobuf:"bytes,6,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	HardwareVersion         string      `protobuf:"bytes,7,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	ProductSerialNumber     uint32      `protobuf:"varint,8,opt,name=product_serial_number,json=productSerialNumber,proto3" json:"product_serial_number,omitempty"`
	ProductionYear          uint32      `protobuf:"varint,9,opt,name=production_year,json=productionYear,proto3" json:"production_year,omitempty"`
	ProductionMonth         uint32      `protobuf:"varint,10,opt,name=production_month,json=productionMonth,proto3" json:"production_month,omitempty"`
	BatteryType             BatteryType `protobuf:"varint,11,opt,name=battery_type,json=batteryType,proto3,enum=BatteryType" json:"battery_type,omitempty"`
}

func (x *SolarConfig) Reset() {
	*x = SolarConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solar_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarConfig) ProtoMessage() {}

func (x *SolarConfig) ProtoReflect() protoreflect.Message {
	mi := &file_solar_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarConfig.ProtoReflect.Descriptor instead.
func (*SolarConfig) Descriptor() ([]byte, []int) {
	return file_solar_proto_rawDescGZIP(), []int{0}
}

func (x *SolarConfig) GetMaxSystemVoltage() uint32 {
	if x != nil {
		return x.MaxSystemVoltage
	}
	return 0
}

func (x *SolarConfig) GetRatedChargingCurrent() uint32 {
	if x != nil {
		return x.RatedChargingCurrent
	}
	return 0
}

func (x *SolarConfig) GetRatedDischargingCurrent() uint32 {
	if x != nil {
		return x.RatedDischargingCurrent
	}
	return 0
}

func (x *SolarConfig) GetProductType() ProductType {
	if x != nil {
		return x.ProductType
	}
	return ProductType_TYPE_CONTROLLER
}

func (x *SolarConfig) GetProductModel() string {
	if x != nil {
		return x.ProductModel
	}
	return ""
}

func (x *SolarConfig) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *SolarConfig) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *SolarConfig) GetProductSerialNumber() uint32 {
	if x != nil {
		return x.ProductSerialNumber
	}
	return 0
}

func (x *SolarConfig) GetProductionYear() uint32 {
	if x != nil {
		return x.ProductionYear
	}
	return 0
}

func (x *SolarConfig) GetProductionMonth() uint32 {
	if x != nil {
		return x.ProductionMonth
	}
	return 0
}

func (x *SolarConfig) GetBatteryType() BatteryType {
	if x != nil {
		return x.BatteryType
	}
	return BatteryType_BATTERY_TYPE_OPEN
}

type SolarState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatterySoc               float32            `protobuf:"fixed32,9,opt,name=battery_soc,json=batterySoc,proto3" json:"battery_soc,omitempty"`
	BatteryVoltage           float32            `protobuf:"fixed32,10,opt,name=battery_voltage,json=batteryVoltage,proto3" json:"battery_voltage,omitempty"`
	BatteryVoltageDayMin     float32            `protobuf:"fixed32,11,opt,name=battery_voltage_day_min,json=batteryVoltageDayMin,proto3" json:"battery_voltage_day_min,omitempty"`
	BatteryVoltageDayMax     float32            `protobuf:"fixed32,12,opt,name=battery_voltage_day_max,json=batteryVoltageDayMax,proto3" json:"battery_voltage_day_max,omitempty"`
	ChargingCurrent          float32            `protobuf:"fixed32,13,opt,name=charging_current,json=chargingCurrent,proto3" json:"charging_current,omitempty"`
	ChargingCurrentDayMax    float32            `protobuf:"fixed32,14,opt,name=charging_current_day_max,json=chargingCurrentDayMax,proto3" json:"charging_current_day_max,omitempty"`
	DischargingCurrent       float32            `protobuf:"fixed32,15,opt,name=discharging_current,json=dischargingCurrent,proto3" json:"discharging_current,omitempty"`
	DischargingCurrentDayMax float32            `protobuf:"fixed32,16,opt,name=discharging_current_day_max,json=dischargingCurrentDayMax,proto3" json:"discharging_current_day_max,omitempty"`
	ChargingPower            float32            `protobuf:"fixed32,17,opt,name=charging_power,json=chargingPower,proto3" json:"charging_power,omitempty"`
	ChargingPowerDayMax      float32            `protobuf:"fixed32,18,opt,name=charging_power_day_max,json=chargingPowerDayMax,proto3" json:"charging_power_day_max,omitempty"`
	DischargingPower         float32            `protobuf:"fixed32,19,opt,name=discharging_power,json=dischargingPower,proto3" json:"discharging_power,omitempty"`
	DischargingPowerDayMax   float32            `protobuf:"fixed32,20,opt,name=discharging_power_day_max,json=dischargingPowerDayMax,proto3" json:"discharging_power_day_max,omitempty"`
	ChargingDayAmpHours      float32            `protobuf:"fixed32,21,opt,name=charging_day_amp_hours,json=chargingDayAmpHours,proto3" json:"charging_day_amp_hours,omitempty"`
	DischargingDayAmpHours   float32            `protobuf:"fixed32,22,opt,name=discharging_day_amp_hours,json=dischargingDayAmpHours,proto3" json:"discharging_day_amp_hours,omitempty"`
	GenerationDay            float32            `protobuf:"fixed32,23,opt,name=generation_day,json=generationDay,proto3" json:"generation_day,omitempty"`
	ConsumptionDay           float32            `protobuf:"fixed32,24,opt,name=consumption_day,json=consumptionDay,proto3" json:"consumption_day,omitempty"`
	OperationDays            uint32             `protobuf:"varint,25,opt,name=operation_days,json=operationDays,proto3" json:"operation_days,omitempty"`
	BatteryOverDischargeCnt  uint32             `protobuf:"varint,26,opt,name=battery_over_discharge_cnt,json=batteryOverDischargeCnt,proto3" json:"battery_over_discharge_cnt,omitempty"`
	BatteryFullChargeCnt     uint32             `protobuf:"varint,27,opt,name=battery_full_charge_cnt,json=batteryFullChargeCnt,proto3" json:"battery_full_charge_cnt,omitempty"`
	ChargingTotalAmpHours    uint32             `protobuf:"varint,28,opt,name=charging_total_amp_hours,json=chargingTotalAmpHours,proto3" json:"charging_total_amp_hours,omitempty"`
	DischargingTotalAmpHours uint32             `protobuf:"varint,29,opt,name=discharging_total_amp_hours,json=dischargingTotalAmpHours,proto3" json:"discharging_total_amp_hours,omitempty"`
	GenerationTotal          uint32             `protobuf:"varint,30,opt,name=generation_total,json=generationTotal,proto3" json:"generation_total,omitempty"`
	ConsumptionTotal         uint32             `protobuf:"varint,31,opt,name=consumption_total,json=consumptionTotal,proto3" json:"consumption_total,omitempty"`
	Faults                   uint32             `protobuf:"varint,32,opt,name=faults,proto3" json:"faults,omitempty"`
	TemperatureController    float32            `protobuf:"fixed32,33,opt,name=temperature_controller,json=temperatureController,proto3" json:"temperature_controller,omitempty"`
	TemperatureBattery       float32            `protobuf:"fixed32,34,opt,name=temperature_battery,json=temperatureBattery,proto3" json:"temperature_battery,omitempty"`
	PanelVoltage             float32            `protobuf:"fixed32,35,opt,name=panel_voltage,json=panelVoltage,proto3" json:"panel_voltage,omitempty"`
	PanelCurrent             float32            `protobuf:"fixed32,36,opt,name=panel_current,json=panelCurrent,proto3" json:"panel_current,omitempty"`
	ChargingState            SolarChargingState `protobuf:"varint,37,opt,name=charging_state,json=chargingState,proto3,enum=SolarChargingState" json:"charging_state,omitempty"`
}

func (x *SolarState) Reset() {
	*x = SolarState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_solar_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SolarState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SolarState) ProtoMessage() {}

func (x *SolarState) ProtoReflect() protoreflect.Message {
	mi := &file_solar_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SolarState.ProtoReflect.Descriptor instead.
func (*SolarState) Descriptor() ([]byte, []int) {
	return file_solar_proto_rawDescGZIP(), []int{1}
}

func (x *SolarState) GetBatterySoc() float32 {
	if x != nil {
		return x.BatterySoc
	}
	return 0
}

func (x *SolarState) GetBatteryVoltage() float32 {
	if x != nil {
		return x.BatteryVoltage
	}
	return 0
}

func (x *SolarState) GetBatteryVoltageDayMin() float32 {
	if x != nil {
		return x.BatteryVoltageDayMin
	}
	return 0
}

func (x *SolarState) GetBatteryVoltageDayMax() float32 {
	if x != nil {
		return x.BatteryVoltageDayMax
	}
	return 0
}

func (x *SolarState) GetChargingCurrent() float32 {
	if x != nil {
		return x.ChargingCurrent
	}
	return 0
}

func (x *SolarState) GetChargingCurrentDayMax() float32 {
	if x != nil {
		return x.ChargingCurrentDayMax
	}
	return 0
}

func (x *SolarState) GetDischargingCurrent() float32 {
	if x != nil {
		return x.DischargingCurrent
	}
	return 0
}

func (x *SolarState) GetDischargingCurrentDayMax() float32 {
	if x != nil {
		return x.DischargingCurrentDayMax
	}
	return 0
}

func (x *SolarState) GetChargingPower() float32 {
	if x != nil {
		return x.ChargingPower
	}
	return 0
}

func (x *SolarState) GetChargingPowerDayMax() float32 {
	if x != nil {
		return x.ChargingPowerDayMax
	}
	return 0
}

func (x *SolarState) GetDischargingPower() float32 {
	if x != nil {
		return x.DischargingPower
	}
	return 0
}

func (x *SolarState) GetDischargingPowerDayMax() float32 {
	if x != nil {
		return x.DischargingPowerDayMax
	}
	return 0
}

func (x *SolarState) GetChargingDayAmpHours() float32 {
	if x != nil {
		return x.ChargingDayAmpHours
	}
	return 0
}

func (x *SolarState) GetDischargingDayAmpHours() float32 {
	if x != nil {
		return x.DischargingDayAmpHours
	}
	return 0
}

func (x *SolarState) GetGenerationDay() float32 {
	if x != nil {
		return x.GenerationDay
	}
	return 0
}

func (x *SolarState) GetConsumptionDay() float32 {
	if x != nil {
		return x.ConsumptionDay
	}
	return 0
}

func (x *SolarState) GetOperationDays() uint32 {
	if x != nil {
		return x.OperationDays
	}
	return 0
}

func (x *SolarState) GetBatteryOverDischargeCnt() uint32 {
	if x != nil {
		return x.BatteryOverDischargeCnt
	}
	return 0
}

func (x *SolarState) GetBatteryFullChargeCnt() uint32 {
	if x != nil {
		return x.BatteryFullChargeCnt
	}
	return 0
}

func (x *SolarState) GetChargingTotalAmpHours() uint32 {
	if x != nil {
		return x.ChargingTotalAmpHours
	}
	return 0
}

func (x *SolarState) GetDischargingTotalAmpHours() uint32 {
	if x != nil {
		return x.DischargingTotalAmpHours
	}
	return 0
}

func (x *SolarState) GetGenerationTotal() uint32 {
	if x != nil {
		return x.GenerationTotal
	}
	return 0
}

func (x *SolarState) GetConsumptionTotal() uint32 {
	if x != nil {
		return x.ConsumptionTotal
	}
	return 0
}

func (x *SolarState) GetFaults() uint32 {
	if x != nil {
		return x.Faults
	}
	return 0
}

func (x *SolarState) GetTemperatureController() float32 {
	if x != nil {
		return x.TemperatureController
	}
	return 0
}

func (x *SolarState) GetTemperatureBattery() float32 {
	if x != nil {
		return x.TemperatureBattery
	}
	return 0
}

func (x *SolarState) GetPanelVoltage() float32 {
	if x != nil {
		return x.PanelVoltage
	}
	return 0
}

func (x *SolarState) GetPanelCurrent() float32 {
	if x != nil {
		return x.PanelCurrent
	}
	return 0
}

func (x *SolarState) GetChargingState() SolarChargingState {
	if x != nil {
		return x.ChargingState
	}
	return SolarChargingState_STATE_DEACTIVATED
}

var File_solar_proto protoreflect.FileDescriptor

var file_solar_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x04,
	0x0a, 0x0b, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x69, 0x73, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x12, 0x2f, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x8d, 0x0b, 0x0a, 0x0a, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x6f, 0x63,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53,
	0x6f, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x61, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x44, 0x61, 0x79, 0x4d,
	0x69, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x14, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x44, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x2f, 0x0a,
	0x13, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3d,
	0x0a, 0x1b, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x18, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x44, 0x61, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x73,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x64, 0x69, 0x73, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x61, 0x79, 0x4d, 0x61,
	0x78, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61,
	0x79, 0x5f, 0x61, 0x6d, 0x70, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x13, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x41, 0x6d,
	0x70, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x61, 0x6d, 0x70, 0x5f, 0x68, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x64, 0x69, 0x73, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x41, 0x6d, 0x70, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x79, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x46,
	0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x70, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x70,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x70, 0x5f, 0x68,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x64, 0x69, 0x73, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x70, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2a, 0xa7, 0x01, 0x0a, 0x12, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d,
	0x50, 0x50, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x2a, 0x35, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x45,
	0x52, 0x10, 0x01, 0x2a, 0x8a, 0x01, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x41,
	0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x4c, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x41, 0x54,
	0x54, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x54, 0x48, 0x49, 0x55,
	0x4d, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x04,
	0x42, 0x1e, 0x5a, 0x1c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x74, 0x76, 0x30, 0x67, 0x2f, 0x76, 0x61, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_solar_proto_rawDescOnce sync.Once
	file_solar_proto_rawDescData = file_solar_proto_rawDesc
)

func file_solar_proto_rawDescGZIP() []byte {
	file_solar_proto_rawDescOnce.Do(func() {
		file_solar_proto_rawDescData = protoimpl.X.CompressGZIP(file_solar_proto_rawDescData)
	})
	return file_solar_proto_rawDescData
}

var file_solar_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_solar_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_solar_proto_goTypes = []interface{}{
	(SolarChargingState)(0), // 0: SolarChargingState
	(ProductType)(0),        // 1: ProductType
	(BatteryType)(0),        // 2: BatteryType
	(*SolarConfig)(nil),     // 3: SolarConfig
	(*SolarState)(nil),      // 4: SolarState
}
var file_solar_proto_depIdxs = []int32{
	1, // 0: SolarConfig.product_type:type_name -> ProductType
	2, // 1: SolarConfig.battery_type:type_name -> BatteryType
	0, // 2: SolarState.charging_state:type_name -> SolarChargingState
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_solar_proto_init() }
func file_solar_proto_init() {
	if File_solar_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_solar_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_solar_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SolarState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_solar_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_solar_proto_goTypes,
		DependencyIndexes: file_solar_proto_depIdxs,
		EnumInfos:         file_solar_proto_enumTypes,
		MessageInfos:      file_solar_proto_msgTypes,
	}.Build()
	File_solar_proto = out.File
	file_solar_proto_rawDesc = nil
	file_solar_proto_goTypes = nil
	file_solar_proto_depIdxs = nil
}
