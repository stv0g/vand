// SPDX-FileCopyrightText: 2023 Steffen Vogel <post@steffenvogel.de>
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: obd2.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CarOBD2State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// See https://en.wikipedia.org/wiki/OBD-II_PIDs
	MotorRunning               bool    `protobuf:"varint,1,opt,name=motor_running,json=motorRunning,proto3" json:"motor_running,omitempty"`
	VehicleSpeed               float32 `protobuf:"fixed32,2,opt,name=vehicle_speed,json=vehicleSpeed,proto3" json:"vehicle_speed,omitempty"`
	EngineRpm                  float32 `protobuf:"fixed32,3,opt,name=engine_rpm,json=engineRpm,proto3" json:"engine_rpm,omitempty"`
	EngineLoad                 float32 `protobuf:"fixed32,4,opt,name=engine_load,json=engineLoad,proto3" json:"engine_load,omitempty"`
	CoolantTemperature         float32 `protobuf:"fixed32,5,opt,name=coolant_temperature,json=coolantTemperature,proto3" json:"coolant_temperature,omitempty"`
	OilTemperature             float32 `protobuf:"fixed32,6,opt,name=oil_temperature,json=oilTemperature,proto3" json:"oil_temperature,omitempty"`
	AmbientTemperature         float32 `protobuf:"fixed32,7,opt,name=ambient_temperature,json=ambientTemperature,proto3" json:"ambient_temperature,omitempty"`
	IntakeAirTemperature       float32 `protobuf:"fixed32,8,opt,name=intake_air_temperature,json=intakeAirTemperature,proto3" json:"intake_air_temperature,omitempty"`
	ThrottlePercentage         float32 `protobuf:"fixed32,9,opt,name=throttle_percentage,json=throttlePercentage,proto3" json:"throttle_percentage,omitempty"`
	FuelTankLevel              float32 `protobuf:"fixed32,10,opt,name=fuel_tank_level,json=fuelTankLevel,proto3" json:"fuel_tank_level,omitempty"`
	FuelRate                   float32 `protobuf:"fixed32,11,opt,name=fuel_rate,json=fuelRate,proto3" json:"fuel_rate,omitempty"`
	DistanceSinceDtcClear      float32 `protobuf:"fixed32,12,opt,name=distance_since_dtc_clear,json=distanceSinceDtcClear,proto3" json:"distance_since_dtc_clear,omitempty"`
	AbsoluteBarometricPressure float32 `protobuf:"fixed32,13,opt,name=absolute_barometric_pressure,json=absoluteBarometricPressure,proto3" json:"absolute_barometric_pressure,omitempty"`
	TransmissionActualGear     uint32  `protobuf:"varint,14,opt,name=transmission_actual_gear,json=transmissionActualGear,proto3" json:"transmission_actual_gear,omitempty"`
	Odomoeter                  uint32  `protobuf:"varint,15,opt,name=odomoeter,proto3" json:"odomoeter,omitempty"`
	RuntimeSinceStart          uint32  `protobuf:"varint,16,opt,name=runtime_since_start,json=runtimeSinceStart,proto3" json:"runtime_since_start,omitempty"`
	ControlModuleVoltage       float32 `protobuf:"fixed32,17,opt,name=control_module_voltage,json=controlModuleVoltage,proto3" json:"control_module_voltage,omitempty"`
	EngineOilTemperature       float32 `protobuf:"fixed32,18,opt,name=engine_oil_temperature,json=engineOilTemperature,proto3" json:"engine_oil_temperature,omitempty"`
}

func (x *CarOBD2State) Reset() {
	*x = CarOBD2State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_obd2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarOBD2State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarOBD2State) ProtoMessage() {}

func (x *CarOBD2State) ProtoReflect() protoreflect.Message {
	mi := &file_obd2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarOBD2State.ProtoReflect.Descriptor instead.
func (*CarOBD2State) Descriptor() ([]byte, []int) {
	return file_obd2_proto_rawDescGZIP(), []int{0}
}

func (x *CarOBD2State) GetMotorRunning() bool {
	if x != nil {
		return x.MotorRunning
	}
	return false
}

func (x *CarOBD2State) GetVehicleSpeed() float32 {
	if x != nil {
		return x.VehicleSpeed
	}
	return 0
}

func (x *CarOBD2State) GetEngineRpm() float32 {
	if x != nil {
		return x.EngineRpm
	}
	return 0
}

func (x *CarOBD2State) GetEngineLoad() float32 {
	if x != nil {
		return x.EngineLoad
	}
	return 0
}

func (x *CarOBD2State) GetCoolantTemperature() float32 {
	if x != nil {
		return x.CoolantTemperature
	}
	return 0
}

func (x *CarOBD2State) GetOilTemperature() float32 {
	if x != nil {
		return x.OilTemperature
	}
	return 0
}

func (x *CarOBD2State) GetAmbientTemperature() float32 {
	if x != nil {
		return x.AmbientTemperature
	}
	return 0
}

func (x *CarOBD2State) GetIntakeAirTemperature() float32 {
	if x != nil {
		return x.IntakeAirTemperature
	}
	return 0
}

func (x *CarOBD2State) GetThrottlePercentage() float32 {
	if x != nil {
		return x.ThrottlePercentage
	}
	return 0
}

func (x *CarOBD2State) GetFuelTankLevel() float32 {
	if x != nil {
		return x.FuelTankLevel
	}
	return 0
}

func (x *CarOBD2State) GetFuelRate() float32 {
	if x != nil {
		return x.FuelRate
	}
	return 0
}

func (x *CarOBD2State) GetDistanceSinceDtcClear() float32 {
	if x != nil {
		return x.DistanceSinceDtcClear
	}
	return 0
}

func (x *CarOBD2State) GetAbsoluteBarometricPressure() float32 {
	if x != nil {
		return x.AbsoluteBarometricPressure
	}
	return 0
}

func (x *CarOBD2State) GetTransmissionActualGear() uint32 {
	if x != nil {
		return x.TransmissionActualGear
	}
	return 0
}

func (x *CarOBD2State) GetOdomoeter() uint32 {
	if x != nil {
		return x.Odomoeter
	}
	return 0
}

func (x *CarOBD2State) GetRuntimeSinceStart() uint32 {
	if x != nil {
		return x.RuntimeSinceStart
	}
	return 0
}

func (x *CarOBD2State) GetControlModuleVoltage() float32 {
	if x != nil {
		return x.ControlModuleVoltage
	}
	return 0
}

func (x *CarOBD2State) GetEngineOilTemperature() float32 {
	if x != nil {
		return x.EngineOilTemperature
	}
	return 0
}

var File_obd2_proto protoreflect.FileDescriptor

var file_obd2_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6f, 0x62, 0x64, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x06, 0x0a,
	0x0c, 0x43, 0x61, 0x72, 0x4f, 0x42, 0x44, 0x32, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x72, 0x70, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x52, 0x70, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6f, 0x6c, 0x61,
	0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x63, 0x6f, 0x6f, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x69, 0x6c, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x69, 0x72,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x69, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x75, 0x65,
	0x6c, 0x5f, 0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x66, 0x75, 0x65, 0x6c, 0x54, 0x61, 0x6e, 0x6b, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x65, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x75, 0x65, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x37,
	0x0a, 0x18, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x5f, 0x64, 0x74, 0x63, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x15, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x44,
	0x74, 0x63, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x40, 0x0a, 0x1c, 0x61, 0x62, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x61,
	0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x67, 0x65, 0x61, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x47,
	0x65, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x64, 0x6f, 0x6d, 0x6f, 0x65, 0x74, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x64, 0x6f, 0x6d, 0x6f, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x6f, 0x69, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4f,
	0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x1e, 0x5a,
	0x1c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x76, 0x30,
	0x67, 0x2f, 0x76, 0x61, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_obd2_proto_rawDescOnce sync.Once
	file_obd2_proto_rawDescData = file_obd2_proto_rawDesc
)

func file_obd2_proto_rawDescGZIP() []byte {
	file_obd2_proto_rawDescOnce.Do(func() {
		file_obd2_proto_rawDescData = protoimpl.X.CompressGZIP(file_obd2_proto_rawDescData)
	})
	return file_obd2_proto_rawDescData
}

var file_obd2_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_obd2_proto_goTypes = []interface{}{
	(*CarOBD2State)(nil), // 0: CarOBD2State
}
var file_obd2_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_obd2_proto_init() }
func file_obd2_proto_init() {
	if File_obd2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_obd2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarOBD2State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_obd2_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_obd2_proto_goTypes,
		DependencyIndexes: file_obd2_proto_depIdxs,
		MessageInfos:      file_obd2_proto_msgTypes,
	}.Build()
	File_obd2_proto = out.File
	file_obd2_proto_rawDesc = nil
	file_obd2_proto_goTypes = nil
	file_obd2_proto_depIdxs = nil
}
