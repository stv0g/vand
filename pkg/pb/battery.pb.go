// SPDX-FileCopyrightText: 2023 Steffen Vogel <post@steffenvogel.de>
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: battery.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatteryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductionYear  uint32 `protobuf:"varint,1,opt,name=production_year,json=productionYear,proto3" json:"production_year,omitempty"`
	ProductionMonth uint32 `protobuf:"varint,2,opt,name=production_month,json=productionMonth,proto3" json:"production_month,omitempty"`
	ProductionDay   uint32 `protobuf:"varint,3,opt,name=production_day,json=productionDay,proto3" json:"production_day,omitempty"`
	SoftwareVersion uint32 `protobuf:"varint,4,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	CellCount       uint32 `protobuf:"varint,5,opt,name=cell_count,json=cellCount,proto3" json:"cell_count,omitempty"`
	NtcCount        uint32 `protobuf:"varint,6,opt,name=ntc_count,json=ntcCount,proto3" json:"ntc_count,omitempty"`
	DeviceName      string `protobuf:"bytes,7,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	SerialNumber    string `protobuf:"bytes,8,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Model           string `protobuf:"bytes,9,opt,name=model,proto3" json:"model,omitempty"`
	Barcode         string `protobuf:"bytes,10,opt,name=barcode,proto3" json:"barcode,omitempty"`
}

func (x *BatteryConfig) Reset() {
	*x = BatteryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battery_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryConfig) ProtoMessage() {}

func (x *BatteryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryConfig.ProtoReflect.Descriptor instead.
func (*BatteryConfig) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{0}
}

func (x *BatteryConfig) GetProductionYear() uint32 {
	if x != nil {
		return x.ProductionYear
	}
	return 0
}

func (x *BatteryConfig) GetProductionMonth() uint32 {
	if x != nil {
		return x.ProductionMonth
	}
	return 0
}

func (x *BatteryConfig) GetProductionDay() uint32 {
	if x != nil {
		return x.ProductionDay
	}
	return 0
}

func (x *BatteryConfig) GetSoftwareVersion() uint32 {
	if x != nil {
		return x.SoftwareVersion
	}
	return 0
}

func (x *BatteryConfig) GetCellCount() uint32 {
	if x != nil {
		return x.CellCount
	}
	return 0
}

func (x *BatteryConfig) GetNtcCount() uint32 {
	if x != nil {
		return x.NtcCount
	}
	return 0
}

func (x *BatteryConfig) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *BatteryConfig) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *BatteryConfig) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *BatteryConfig) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

type BatteryState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackVoltage        float32   `protobuf:"fixed32,1,opt,name=pack_voltage,json=packVoltage,proto3" json:"pack_voltage,omitempty"`
	PackCurrent        float32   `protobuf:"fixed32,2,opt,name=pack_current,json=packCurrent,proto3" json:"pack_current,omitempty"`
	Errors             uint32    `protobuf:"varint,3,opt,name=errors,proto3" json:"errors,omitempty"`
	Balancing          uint32    `protobuf:"varint,4,opt,name=balancing,proto3" json:"balancing,omitempty"`
	Voltages           []float32 `protobuf:"fixed32,5,rep,packed,name=voltages,proto3" json:"voltages,omitempty"`
	Temperatures       []float32 `protobuf:"fixed32,6,rep,packed,name=temperatures,proto3" json:"temperatures,omitempty"`
	CycleCapacity      float32   `protobuf:"fixed32,7,opt,name=cycle_capacity,json=cycleCapacity,proto3" json:"cycle_capacity,omitempty"`
	DesignCapacity     float32   `protobuf:"fixed32,8,opt,name=design_capacity,json=designCapacity,proto3" json:"design_capacity,omitempty"`
	CycleCount         uint32    `protobuf:"varint,9,opt,name=cycle_count,json=cycleCount,proto3" json:"cycle_count,omitempty"`
	ChargeFetEnable    bool      `protobuf:"varint,10,opt,name=charge_fet_enable,json=chargeFetEnable,proto3" json:"charge_fet_enable,omitempty"`
	DischargeFetEnable bool      `protobuf:"varint,11,opt,name=discharge_fet_enable,json=dischargeFetEnable,proto3" json:"discharge_fet_enable,omitempty"`
	Soc                uint32    `protobuf:"varint,12,opt,name=soc,proto3" json:"soc,omitempty"`
}

func (x *BatteryState) Reset() {
	*x = BatteryState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_battery_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryState) ProtoMessage() {}

func (x *BatteryState) ProtoReflect() protoreflect.Message {
	mi := &file_battery_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryState.ProtoReflect.Descriptor instead.
func (*BatteryState) Descriptor() ([]byte, []int) {
	return file_battery_proto_rawDescGZIP(), []int{1}
}

func (x *BatteryState) GetPackVoltage() float32 {
	if x != nil {
		return x.PackVoltage
	}
	return 0
}

func (x *BatteryState) GetPackCurrent() float32 {
	if x != nil {
		return x.PackCurrent
	}
	return 0
}

func (x *BatteryState) GetErrors() uint32 {
	if x != nil {
		return x.Errors
	}
	return 0
}

func (x *BatteryState) GetBalancing() uint32 {
	if x != nil {
		return x.Balancing
	}
	return 0
}

func (x *BatteryState) GetVoltages() []float32 {
	if x != nil {
		return x.Voltages
	}
	return nil
}

func (x *BatteryState) GetTemperatures() []float32 {
	if x != nil {
		return x.Temperatures
	}
	return nil
}

func (x *BatteryState) GetCycleCapacity() float32 {
	if x != nil {
		return x.CycleCapacity
	}
	return 0
}

func (x *BatteryState) GetDesignCapacity() float32 {
	if x != nil {
		return x.DesignCapacity
	}
	return 0
}

func (x *BatteryState) GetCycleCount() uint32 {
	if x != nil {
		return x.CycleCount
	}
	return 0
}

func (x *BatteryState) GetChargeFetEnable() bool {
	if x != nil {
		return x.ChargeFetEnable
	}
	return false
}

func (x *BatteryState) GetDischargeFetEnable() bool {
	if x != nil {
		return x.DischargeFetEnable
	}
	return false
}

func (x *BatteryState) GetSoc() uint32 {
	if x != nil {
		return x.Soc
	}
	return 0
}

var File_battery_proto protoreflect.FileDescriptor

var file_battery_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe7, 0x02, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x65, 0x6c,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x74, 0x63, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x74, 0x63, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xab, 0x03, 0x0a, 0x0c, 0x42, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x63, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f,
	0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x66, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x46, 0x65, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x66, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x64, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x46, 0x65, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6f, 0x63, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x73, 0x6f, 0x63, 0x42, 0x1e, 0x5a, 0x1c, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x76, 0x30, 0x67, 0x2f, 0x76, 0x61, 0x6e, 0x64,
	0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_battery_proto_rawDescOnce sync.Once
	file_battery_proto_rawDescData = file_battery_proto_rawDesc
)

func file_battery_proto_rawDescGZIP() []byte {
	file_battery_proto_rawDescOnce.Do(func() {
		file_battery_proto_rawDescData = protoimpl.X.CompressGZIP(file_battery_proto_rawDescData)
	})
	return file_battery_proto_rawDescData
}

var file_battery_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_battery_proto_goTypes = []interface{}{
	(*BatteryConfig)(nil), // 0: BatteryConfig
	(*BatteryState)(nil),  // 1: BatteryState
}
var file_battery_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_battery_proto_init() }
func file_battery_proto_init() {
	if File_battery_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_battery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_battery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_battery_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_battery_proto_goTypes,
		DependencyIndexes: file_battery_proto_depIdxs,
		MessageInfos:      file_battery_proto_msgTypes,
	}.Build()
	File_battery_proto = out.File
	file_battery_proto_rawDesc = nil
	file_battery_proto_goTypes = nil
	file_battery_proto_depIdxs = nil
}
