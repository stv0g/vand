// SPDX-FileCopyrightText: 2023 Steffen Vogel <post@steffenvogel.de>
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: gps.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GpsFix int32

const (
	GpsFix_FIX_INVALID GpsFix = 0 // Not fixed
	GpsFix_FIX_GPS     GpsFix = 1 // GPS
	GpsFix_FIX_DGPS    GpsFix = 2 // Differential GPS
)

// Enum value maps for GpsFix.
var (
	GpsFix_name = map[int32]string{
		0: "FIX_INVALID",
		1: "FIX_GPS",
		2: "FIX_DGPS",
	}
	GpsFix_value = map[string]int32{
		"FIX_INVALID": 0,
		"FIX_GPS":     1,
		"FIX_DGPS":    2,
	}
)

func (x GpsFix) Enum() *GpsFix {
	p := new(GpsFix)
	*p = x
	return p
}

func (x GpsFix) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GpsFix) Descriptor() protoreflect.EnumDescriptor {
	return file_gps_proto_enumTypes[0].Descriptor()
}

func (GpsFix) Type() protoreflect.EnumType {
	return &file_gps_proto_enumTypes[0]
}

func (x GpsFix) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GpsFix.Descriptor instead.
func (GpsFix) EnumDescriptor() ([]byte, []int) {
	return file_gps_proto_rawDescGZIP(), []int{0}
}

type GpsFixMode int32

const (
	GpsFixMode_FIX_MODE_INVALID GpsFixMode = 0 // Not fixed
	GpsFixMode_FIX_MODE_2D      GpsFixMode = 1 // 2D GPS
	GpsFixMode_FIX_MODE_3D      GpsFixMode = 2 // 3D GPS
)

// Enum value maps for GpsFixMode.
var (
	GpsFixMode_name = map[int32]string{
		0: "FIX_MODE_INVALID",
		1: "FIX_MODE_2D",
		2: "FIX_MODE_3D",
	}
	GpsFixMode_value = map[string]int32{
		"FIX_MODE_INVALID": 0,
		"FIX_MODE_2D":      1,
		"FIX_MODE_3D":      2,
	}
)

func (x GpsFixMode) Enum() *GpsFixMode {
	p := new(GpsFixMode)
	*p = x
	return p
}

func (x GpsFixMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GpsFixMode) Descriptor() protoreflect.EnumDescriptor {
	return file_gps_proto_enumTypes[1].Descriptor()
}

func (GpsFixMode) Type() protoreflect.EnumType {
	return &file_gps_proto_enumTypes[1]
}

func (x GpsFixMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GpsFixMode.Descriptor instead.
func (GpsFixMode) EnumDescriptor() ([]byte, []int) {
	return file_gps_proto_rawDescGZIP(), []int{1}
}

type GpsSatellite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elevation uint32 `protobuf:"varint,1,opt,name=elevation,proto3" json:"elevation,omitempty"` // Satellite elevation
	Azimuth   uint32 `protobuf:"varint,2,opt,name=azimuth,proto3" json:"azimuth,omitempty"`     // Satellite azimuth
	Snr       uint32 `protobuf:"varint,3,opt,name=snr,proto3" json:"snr,omitempty"`             // Satellite signal noise ratio
	Num       int64  `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`             // Satellite number
}

func (x *GpsSatellite) Reset() {
	*x = GpsSatellite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gps_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpsSatellite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpsSatellite) ProtoMessage() {}

func (x *GpsSatellite) ProtoReflect() protoreflect.Message {
	mi := &file_gps_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpsSatellite.ProtoReflect.Descriptor instead.
func (*GpsSatellite) Descriptor() ([]byte, []int) {
	return file_gps_proto_rawDescGZIP(), []int{0}
}

func (x *GpsSatellite) GetElevation() uint32 {
	if x != nil {
		return x.Elevation
	}
	return 0
}

func (x *GpsSatellite) GetAzimuth() uint32 {
	if x != nil {
		return x.Azimuth
	}
	return 0
}

func (x *GpsSatellite) GetSnr() uint32 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *GpsSatellite) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type GpsTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hour     uint32 `protobuf:"varint,1,opt,name=hour,proto3" json:"hour,omitempty"`         // Hour
	Minute   uint32 `protobuf:"varint,2,opt,name=minute,proto3" json:"minute,omitempty"`     // Minute
	Second   uint32 `protobuf:"varint,3,opt,name=second,proto3" json:"second,omitempty"`     // Second
	Thousand uint32 `protobuf:"varint,4,opt,name=thousand,proto3" json:"thousand,omitempty"` // Thousand
}

func (x *GpsTime) Reset() {
	*x = GpsTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gps_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpsTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpsTime) ProtoMessage() {}

func (x *GpsTime) ProtoReflect() protoreflect.Message {
	mi := &file_gps_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpsTime.ProtoReflect.Descriptor instead.
func (*GpsTime) Descriptor() ([]byte, []int) {
	return file_gps_proto_rawDescGZIP(), []int{1}
}

func (x *GpsTime) GetHour() uint32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *GpsTime) GetMinute() uint32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *GpsTime) GetSecond() uint32 {
	if x != nil {
		return x.Second
	}
	return 0
}

func (x *GpsTime) GetThousand() uint32 {
	if x != nil {
		return x.Thousand
	}
	return 0
}

type GpsDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day   uint32 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`     // Day (start from 1)
	Month uint32 `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"` // Month (start from 1)
	Year  uint32 `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`   // Year (start from 2000)
}

func (x *GpsDate) Reset() {
	*x = GpsDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gps_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpsDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpsDate) ProtoMessage() {}

func (x *GpsDate) ProtoReflect() protoreflect.Message {
	mi := &file_gps_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpsDate.ProtoReflect.Descriptor instead.
func (*GpsDate) Descriptor() ([]byte, []int) {
	return file_gps_proto_rawDescGZIP(), []int{2}
}

func (x *GpsDate) GetDay() uint32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *GpsDate) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *GpsDate) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

type GpsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude       float64         `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`                                      // Latitude (degrees)
	Longitude      float64         `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`                                    // Longitude (degrees)
	Altitude       float64         `protobuf:"fixed64,3,opt,name=altitude,proto3" json:"altitude,omitempty"`                                      // Altitude (meters)
	Fix            GpsFix          `protobuf:"varint,4,opt,name=fix,proto3,enum=GpsFix" json:"fix,omitempty"`                                     // Fix status
	FixMode        GpsFixMode      `protobuf:"varint,5,opt,name=fix_mode,json=fixMode,proto3,enum=GpsFixMode" json:"fix_mode,omitempty"`          // Fix mode
	Date           *GpsDate        `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`                                                // Fix date
	Time           *GpsTime        `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`                                                // Time in UTC
	SatsInView     uint32          `protobuf:"varint,8,opt,name=sats_in_view,json=satsInView,proto3" json:"sats_in_view,omitempty"`               // Number of sats in view
	SatsInUse      uint32          `protobuf:"varint,9,opt,name=sats_in_use,json=satsInUse,proto3" json:"sats_in_use,omitempty"`                  // Number of sats in use
	SatsIdInUse    []int64         `protobuf:"varint,10,rep,packed,name=sats_id_in_use,json=satsIdInUse,proto3" json:"sats_id_in_use,omitempty"`  // ID list of satellite in use
	SatsDescInView []*GpsSatellite `protobuf:"bytes,11,rep,name=sats_desc_in_view,json=satsDescInView,proto3" json:"sats_desc_in_view,omitempty"` // Information of satellites in view
	DopH           float64         `protobuf:"fixed64,12,opt,name=dop_h,json=dopH,proto3" json:"dop_h,omitempty"`                                 // Horizontal dilution of precision
	DopP           float64         `protobuf:"fixed64,13,opt,name=dop_p,json=dopP,proto3" json:"dop_p,omitempty"`                                 // Position dilution of precision
	DopV           float64         `protobuf:"fixed64,14,opt,name=dop_v,json=dopV,proto3" json:"dop_v,omitempty"`                                 // Vertical dilution of precision
	Valid          bool            `protobuf:"varint,15,opt,name=valid,proto3" json:"valid,omitempty"`                                            // GPS validity
	Speed          float64         `protobuf:"fixed64,16,opt,name=speed,proto3" json:"speed,omitempty"`                                           // Ground speed, unit: m/s
	Cog            float64         `protobuf:"fixed64,17,opt,name=cog,proto3" json:"cog,omitempty"`                                               // Course over ground
	Variation      float64         `protobuf:"fixed64,18,opt,name=variation,proto3" json:"variation,omitempty"`                                   // Magnetic variation
}

func (x *GpsState) Reset() {
	*x = GpsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gps_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpsState) ProtoMessage() {}

func (x *GpsState) ProtoReflect() protoreflect.Message {
	mi := &file_gps_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpsState.ProtoReflect.Descriptor instead.
func (*GpsState) Descriptor() ([]byte, []int) {
	return file_gps_proto_rawDescGZIP(), []int{3}
}

func (x *GpsState) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GpsState) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GpsState) GetAltitude() float64 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *GpsState) GetFix() GpsFix {
	if x != nil {
		return x.Fix
	}
	return GpsFix_FIX_INVALID
}

func (x *GpsState) GetFixMode() GpsFixMode {
	if x != nil {
		return x.FixMode
	}
	return GpsFixMode_FIX_MODE_INVALID
}

func (x *GpsState) GetDate() *GpsDate {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *GpsState) GetTime() *GpsTime {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *GpsState) GetSatsInView() uint32 {
	if x != nil {
		return x.SatsInView
	}
	return 0
}

func (x *GpsState) GetSatsInUse() uint32 {
	if x != nil {
		return x.SatsInUse
	}
	return 0
}

func (x *GpsState) GetSatsIdInUse() []int64 {
	if x != nil {
		return x.SatsIdInUse
	}
	return nil
}

func (x *GpsState) GetSatsDescInView() []*GpsSatellite {
	if x != nil {
		return x.SatsDescInView
	}
	return nil
}

func (x *GpsState) GetDopH() float64 {
	if x != nil {
		return x.DopH
	}
	return 0
}

func (x *GpsState) GetDopP() float64 {
	if x != nil {
		return x.DopP
	}
	return 0
}

func (x *GpsState) GetDopV() float64 {
	if x != nil {
		return x.DopV
	}
	return 0
}

func (x *GpsState) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *GpsState) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *GpsState) GetCog() float64 {
	if x != nil {
		return x.Cog
	}
	return 0
}

func (x *GpsState) GetVariation() float64 {
	if x != nil {
		return x.Variation
	}
	return 0
}

var File_gps_proto protoreflect.FileDescriptor

var file_gps_proto_rawDesc = []byte{
	0x0a, 0x09, 0x67, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6a, 0x0a, 0x0c, 0x47,
	0x70, 0x73, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x7a, 0x69,
	0x6d, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x7a, 0x69, 0x6d,
	0x75, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x73, 0x6e, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x69, 0x0a, 0x07, 0x47, 0x70, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x68, 0x6f, 0x75, 0x73, 0x61,
	0x6e, 0x64, 0x22, 0x45, 0x0a, 0x07, 0x47, 0x70, 0x73, 0x44, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0x9b, 0x04, 0x0a, 0x08, 0x47, 0x70,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x03,
	0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x47, 0x70, 0x73, 0x46,
	0x69, 0x78, 0x52, 0x03, 0x66, 0x69, 0x78, 0x12, 0x26, 0x0a, 0x08, 0x66, 0x69, 0x78, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x47, 0x70, 0x73, 0x46,
	0x69, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x66, 0x69, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x47, 0x70, 0x73, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x47, 0x70,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73,
	0x61, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1e, 0x0a,
	0x0b, 0x73, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x0e, 0x73, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x61, 0x74, 0x73, 0x49, 0x64, 0x49, 0x6e, 0x55,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x11, 0x73, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x5f,
	0x69, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x47, 0x70, 0x73, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x61,
	0x74, 0x73, 0x44, 0x65, 0x73, 0x63, 0x49, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x12, 0x13, 0x0a, 0x05,
	0x64, 0x6f, 0x70, 0x5f, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64, 0x6f, 0x70,
	0x48, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x6f, 0x70, 0x5f, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x64, 0x6f, 0x70, 0x50, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x6f, 0x70, 0x5f, 0x76, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x64, 0x6f, 0x70, 0x56, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x34, 0x0a, 0x06, 0x47, 0x70, 0x73, 0x46, 0x69,
	0x78, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x58, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x49, 0x58, 0x5f, 0x47, 0x50, 0x53, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x49, 0x58, 0x5f, 0x44, 0x47, 0x50, 0x53, 0x10, 0x02, 0x2a, 0x44, 0x0a,
	0x0a, 0x47, 0x70, 0x73, 0x46, 0x69, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x46,
	0x49, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x32, 0x44,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x58, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x33,
	0x44, 0x10, 0x02, 0x42, 0x1e, 0x5a, 0x1c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x74, 0x76, 0x30, 0x67, 0x2f, 0x76, 0x61, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gps_proto_rawDescOnce sync.Once
	file_gps_proto_rawDescData = file_gps_proto_rawDesc
)

func file_gps_proto_rawDescGZIP() []byte {
	file_gps_proto_rawDescOnce.Do(func() {
		file_gps_proto_rawDescData = protoimpl.X.CompressGZIP(file_gps_proto_rawDescData)
	})
	return file_gps_proto_rawDescData
}

var file_gps_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_gps_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_gps_proto_goTypes = []interface{}{
	(GpsFix)(0),          // 0: GpsFix
	(GpsFixMode)(0),      // 1: GpsFixMode
	(*GpsSatellite)(nil), // 2: GpsSatellite
	(*GpsTime)(nil),      // 3: GpsTime
	(*GpsDate)(nil),      // 4: GpsDate
	(*GpsState)(nil),     // 5: GpsState
}
var file_gps_proto_depIdxs = []int32{
	0, // 0: GpsState.fix:type_name -> GpsFix
	1, // 1: GpsState.fix_mode:type_name -> GpsFixMode
	4, // 2: GpsState.date:type_name -> GpsDate
	3, // 3: GpsState.time:type_name -> GpsTime
	2, // 4: GpsState.sats_desc_in_view:type_name -> GpsSatellite
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_gps_proto_init() }
func file_gps_proto_init() {
	if File_gps_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gps_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpsSatellite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gps_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpsTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gps_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpsDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gps_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gps_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gps_proto_goTypes,
		DependencyIndexes: file_gps_proto_depIdxs,
		EnumInfos:         file_gps_proto_enumTypes,
		MessageInfos:      file_gps_proto_msgTypes,
	}.Build()
	File_gps_proto = out.File
	file_gps_proto_rawDesc = nil
	file_gps_proto_goTypes = nil
	file_gps_proto_depIdxs = nil
}
